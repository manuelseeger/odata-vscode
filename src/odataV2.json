{
  "functions": [
    {
      "name": "substringof",
      "doc": "Determines if a substring exists within a string.",
      "params": [
        {
          "name": "substring",
          "type": "Edm.String",
          "description": "The substring to search for."
        },
        {
          "name": "string",
          "type": "Edm.String",
          "description": "The string to search within."
        }
      ]
    },
    {
      "name": "startswith",
      "doc": "Checks if a string starts with a specified substring.",
      "params": [
        {
          "name": "string",
          "type": "Edm.String",
          "description": "The string to check."
        },
        {
          "name": "prefix",
          "type": "Edm.String",
          "description": "The prefix to look for."
        }
      ]
    },
    {
      "name": "endswith",
      "doc": "Checks if a string ends with a specified substring.",
      "params": [
        {
          "name": "string",
          "type": "Edm.String",
          "description": "The string to check."
        },
        {
          "name": "suffix",
          "type": "Edm.String",
          "description": "The suffix to look for."
        }
      ]
    },
    {
      "name": "indexof",
      "doc": "Finds the zero-based index of a substring within a string.",
      "params": [
        {
          "name": "string",
          "type": "Edm.String",
          "description": "The string to search within."
        },
        {
          "name": "substring",
          "type": "Edm.String",
          "description": "The substring to find."
        }
      ]
    },
    {
      "name": "replace",
      "doc": "Replaces occurrences of a substring with another substring.",
      "params": [
        {
          "name": "string",
          "type": "Edm.String",
          "description": "The original string."
        },
        {
          "name": "find",
          "type": "Edm.String",
          "description": "The substring to replace."
        },
        {
          "name": "replace",
          "type": "Edm.String",
          "description": "The replacement substring."
        }
      ]
    },
    {
      "name": "tolower",
      "doc": "Converts a string to lower-case.",
      "params": [
        {
          "name": "string",
          "type": "Edm.String",
          "description": "The string to convert."
        }
      ]
    },
    {
      "name": "toupper",
      "doc": "Converts a string to upper-case.",
      "params": [
        {
          "name": "string",
          "type": "Edm.String",
          "description": "The string to convert."
        }
      ]
    },
    {
      "name": "trim",
      "doc": "Removes trailing and leading whitespace from a string.",
      "params": [
        {
          "name": "string",
          "type": "Edm.String",
          "description": "The string to trim."
        }
      ]
    },
    {
      "name": "substring",
      "doc": "Extracts a substring from a string starting at a specified index.",
      "params": [
        {
          "name": "string",
          "type": "Edm.String",
          "description": "The original string."
        },
        {
          "name": "start",
          "type": "Edm.Int32",
          "description": "The zero-based starting index."
        },
        {
          "name": "length",
          "type": "Edm.Int32",
          "description": "The length of the substring."
        }
      ]
    },
    {
      "name": "substring",
      "doc": "Extracts a substring from a string starting at a specified index.",
      "params": [
        {
          "name": "string",
          "type": "Edm.String",
          "description": "The original string."
        },
        {
          "name": "start",
          "type": "Edm.Int32",
          "description": "The zero-based starting index."
        }
      ]
    },
    {
      "name": "concat",
      "doc": "Concatenates two or more strings together.",
      "params": [
        {
          "name": "string1",
          "type": "Edm.String",
          "description": "The first string."
        },
        {
          "name": "string2",
          "type": "Edm.String",
          "description": "The second string."
        }
      ]
    },
    {
      "name": "round",
      "doc": "Rounds a number to the nearest integer.",
      "params": [
        {
          "name": "value",
          "type": "Edm.Double | Edm.Decimal",
          "description": "The numeric value to round."
        }
      ]
    },
    {
      "name": "floor",
      "doc": "Rounds a number down to the nearest integer.",
      "params": [
        {
          "name": "value",
          "type": "Edm.Double | Edm.Decimal",
          "description": "The numeric value to round down."
        }
      ]
    },
    {
      "name": "ceiling",
      "doc": "Rounds a number up to the nearest integer.",
      "params": [
        {
          "name": "value",
          "type": "Edm.Double | Edm.Decimal",
          "description": "The numeric value to round up."
        }
      ]
    },
    {
      "name": "year",
      "doc": "Extracts the year component from a date.",
      "params": [
        {
          "name": "date",
          "type": "Edm.DateTime | Edm.DateTimeOffset",
          "description": "The date value to extract the year from."
        }
      ]
    },
    {
      "name": "month",
      "doc": "Extracts the month component from a date.",
      "params": [
        {
          "name": "date",
          "type": "Edm.DateTime | Edm.DateTimeOffset",
          "description": "The date value to extract the month from."
        }
      ]
    },
    {
      "name": "day",
      "doc": "Extracts the day component from a date.",
      "params": [
        {
          "name": "date",
          "type": "Edm.DateTime | Edm.DateTimeOffset",
          "description": "The date value to extract the day from."
        }
      ]
    },
    {
      "name": "hour",
      "doc": "Extracts the hour component from a time.",
      "params": [
        {
          "name": "time",
          "type": "Edm.DateTime | Edm.DateTimeOffset",
          "description": "The time value to extract the hour from."
        }
      ]
    },
    {
      "name": "minute",
      "doc": "Extracts the minute component from a time.",
      "params": [
        {
          "name": "time",
          "type": "Edm.DateTime | Edm.DateTimeOffset",
          "description": "The time value to extract the minute from."
        }
      ]
    },
    {
      "name": "second",
      "doc": "Extracts the second component from a time.",
      "params": [
        {
          "name": "time",
          "type": "Edm.DateTime | Edm.DateTimeOffset",
          "description": "The time value to extract the second from."
        }
      ]
    },
    {
      "name": "isof",
      "doc": "Checks if a value is of a specified type.",
      "params": [
        {
          "name": "value",
          "type": "Edm.Any",
          "description": "The value to check."
        },
        {
          "name": "type",
          "type": "Edm.String",
          "description": "The type to check against."
        }
      ]
    },
    {
      "name": "cast",
      "doc": "Casts a value to a specified type.",
      "params": [
        {
          "name": "value",
          "type": "Edm.Any",
          "description": "The value to cast."
        },
        {
          "name": "type",
          "type": "Edm.String",
          "description": "The type to cast to."
        }
      ]
    },
    {
      "name": "length",
      "doc": "Returns the length of a string.",
      "params": [
        {
          "name": "string",
          "type": "Edm.String",
          "description": "The string to evaluate."
        }
      ]
    }
  ],
  "systemQueryOptions": [
    { "name": "$select", "doc": "Selects a specific set of properties to return." },
    { "name": "$filter", "doc": "Filters the resources based on provided criteria." },
    { "name": "$orderby", "doc": "Sorts resources based on one or more properties." },
    { "name": "$top", "doc": "Limits the number of resources returned." },
    { "name": "$skip", "doc": "Skips a specified number of resources." },
    { "name": "$expand", "doc": "Includes related entities inline with the primary resource." },
    { "name": "$format", "doc": "Specifies the media type for the response (json, xml)." },
    { "name": "$inlinecount", "doc": "Returns the total count of matching resources." }
  ]
}